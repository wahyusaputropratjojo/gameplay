/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    user: UserAuthOperations;
  };
  blocks: {};
  collections: {
    ageRating: AgeRating;
    ageRatingLogo: AgeRatingLogo;
    ageRatingAuthority: AgeRatingAuthority;
    company: Company;
    continent: Continent;
    country: Country;
    game: Game;
    gamePlatform: GamePlatform;
    genre: Genre;
    platform: Platform;
    platformType: PlatformType;
    store: Store;
    theme: Theme;
    gameHero: GameHero;
    user: User;
    gameGrid: GameGrid;
    gameLogo: GameLogo;
    companyLogo: CompanyLogo;
    countryFlag: CountryFlag;
    platformLogo: PlatformLogo;
    storeLogo: StoreLogo;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    ageRatingAuthority: {
      ageRating: 'ageRating';
    };
    company: {
      developed: 'game';
      published: 'game';
    };
    continent: {
      country: 'country';
    };
    platformType: {
      platform: 'platform';
    };
  };
  collectionsSelect: {
    ageRating: AgeRatingSelect<false> | AgeRatingSelect<true>;
    ageRatingLogo: AgeRatingLogoSelect<false> | AgeRatingLogoSelect<true>;
    ageRatingAuthority: AgeRatingAuthoritySelect<false> | AgeRatingAuthoritySelect<true>;
    company: CompanySelect<false> | CompanySelect<true>;
    continent: ContinentSelect<false> | ContinentSelect<true>;
    country: CountrySelect<false> | CountrySelect<true>;
    game: GameSelect<false> | GameSelect<true>;
    gamePlatform: GamePlatformSelect<false> | GamePlatformSelect<true>;
    genre: GenreSelect<false> | GenreSelect<true>;
    platform: PlatformSelect<false> | PlatformSelect<true>;
    platformType: PlatformTypeSelect<false> | PlatformTypeSelect<true>;
    store: StoreSelect<false> | StoreSelect<true>;
    theme: ThemeSelect<false> | ThemeSelect<true>;
    gameHero: GameHeroSelect<false> | GameHeroSelect<true>;
    user: UserSelect<false> | UserSelect<true>;
    gameGrid: GameGridSelect<false> | GameGridSelect<true>;
    gameLogo: GameLogoSelect<false> | GameLogoSelect<true>;
    companyLogo: CompanyLogoSelect<false> | CompanyLogoSelect<true>;
    countryFlag: CountryFlagSelect<false> | CountryFlagSelect<true>;
    platformLogo: PlatformLogoSelect<false> | PlatformLogoSelect<true>;
    storeLogo: StoreLogoSelect<false> | StoreLogoSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'user';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ageRating".
 */
export interface AgeRating {
  id: string;
  name: string;
  description: string;
  logo?: (string | null) | AgeRatingLogo;
  authority: string | AgeRatingAuthority;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ageRatingLogo".
 */
export interface AgeRatingLogo {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ageRatingAuthority".
 */
export interface AgeRatingAuthority {
  id: string;
  name: string;
  ageRating?: {
    docs?: (string | AgeRating)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company".
 */
export interface Company {
  id: string;
  name: string;
  description: string;
  founded: string;
  about?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  country: string | Country;
  logo: string | CompanyLogo;
  developed?: {
    docs?: (string | Game)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  published?: {
    docs?: (string | Game)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "country".
 */
export interface Country {
  id: string;
  name: string;
  flag?: (string | null) | CountryFlag;
  continent: string | Continent;
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countryFlag".
 */
export interface CountryFlag {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "continent".
 */
export interface Continent {
  id: string;
  name: string;
  country?: {
    docs?: (string | Country)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "companyLogo".
 */
export interface CompanyLogo {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game".
 */
export interface Game {
  id: string;
  name: string;
  initialReleaseDate: string;
  description: string;
  about: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  ageRating: (string | AgeRating)[];
  genre: (string | Genre)[];
  theme: (string | Theme)[];
  developer: (string | Company)[];
  publisher: (string | Company)[];
  logo: string | GameLogo;
  grid: string | GameGrid;
  hero: string | GameHero;
  duration?: {
    mainStory?: number | null;
    additionalContent?: number | null;
    completionist?: number | null;
    combined?: number | null;
  };
  storeLink?:
    | {
        store: string | Store;
        url: string;
        id?: string | null;
      }[]
    | null;
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genre".
 */
export interface Genre {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme".
 */
export interface Theme {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gameLogo".
 */
export interface GameLogo {
  id: string;
  alt: string;
  blurData: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gameGrid".
 */
export interface GameGrid {
  id: string;
  alt: string;
  blurDataURL: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gameHero".
 */
export interface GameHero {
  id: string;
  alt: string;
  blurDataURL: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    classic?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    wide?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    anamorphic?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store".
 */
export interface Store {
  id: string;
  name: string;
  logo?: (string | null) | StoreLogo;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "storeLogo".
 */
export interface StoreLogo {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gamePlatform".
 */
export interface GamePlatform {
  id: string;
  game: string | Game;
  platform: string | Platform;
  releaseDate: string;
  metaScore?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platform".
 */
export interface Platform {
  id: string;
  name: string;
  logo?: (string | null) | PlatformLogo;
  type: string | PlatformType;
  slug: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platformLogo".
 */
export interface PlatformLogo {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platformType".
 */
export interface PlatformType {
  id: string;
  name: string;
  platform?: {
    docs?: (string | Platform)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'ageRating';
        value: string | AgeRating;
      } | null)
    | ({
        relationTo: 'ageRatingLogo';
        value: string | AgeRatingLogo;
      } | null)
    | ({
        relationTo: 'ageRatingAuthority';
        value: string | AgeRatingAuthority;
      } | null)
    | ({
        relationTo: 'company';
        value: string | Company;
      } | null)
    | ({
        relationTo: 'continent';
        value: string | Continent;
      } | null)
    | ({
        relationTo: 'country';
        value: string | Country;
      } | null)
    | ({
        relationTo: 'game';
        value: string | Game;
      } | null)
    | ({
        relationTo: 'gamePlatform';
        value: string | GamePlatform;
      } | null)
    | ({
        relationTo: 'genre';
        value: string | Genre;
      } | null)
    | ({
        relationTo: 'platform';
        value: string | Platform;
      } | null)
    | ({
        relationTo: 'platformType';
        value: string | PlatformType;
      } | null)
    | ({
        relationTo: 'store';
        value: string | Store;
      } | null)
    | ({
        relationTo: 'theme';
        value: string | Theme;
      } | null)
    | ({
        relationTo: 'gameHero';
        value: string | GameHero;
      } | null)
    | ({
        relationTo: 'user';
        value: string | User;
      } | null)
    | ({
        relationTo: 'gameGrid';
        value: string | GameGrid;
      } | null)
    | ({
        relationTo: 'gameLogo';
        value: string | GameLogo;
      } | null)
    | ({
        relationTo: 'companyLogo';
        value: string | CompanyLogo;
      } | null)
    | ({
        relationTo: 'countryFlag';
        value: string | CountryFlag;
      } | null)
    | ({
        relationTo: 'platformLogo';
        value: string | PlatformLogo;
      } | null)
    | ({
        relationTo: 'storeLogo';
        value: string | StoreLogo;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'user';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'user';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ageRating_select".
 */
export interface AgeRatingSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  logo?: T;
  authority?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ageRatingLogo_select".
 */
export interface AgeRatingLogoSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ageRatingAuthority_select".
 */
export interface AgeRatingAuthoritySelect<T extends boolean = true> {
  name?: T;
  ageRating?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company_select".
 */
export interface CompanySelect<T extends boolean = true> {
  name?: T;
  description?: T;
  founded?: T;
  about?: T;
  country?: T;
  logo?: T;
  developed?: T;
  published?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "continent_select".
 */
export interface ContinentSelect<T extends boolean = true> {
  name?: T;
  country?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "country_select".
 */
export interface CountrySelect<T extends boolean = true> {
  name?: T;
  flag?: T;
  continent?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game_select".
 */
export interface GameSelect<T extends boolean = true> {
  name?: T;
  initialReleaseDate?: T;
  description?: T;
  about?: T;
  ageRating?: T;
  genre?: T;
  theme?: T;
  developer?: T;
  publisher?: T;
  logo?: T;
  grid?: T;
  hero?: T;
  duration?:
    | T
    | {
        mainStory?: T;
        additionalContent?: T;
        completionist?: T;
        combined?: T;
      };
  storeLink?:
    | T
    | {
        store?: T;
        url?: T;
        id?: T;
      };
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gamePlatform_select".
 */
export interface GamePlatformSelect<T extends boolean = true> {
  game?: T;
  platform?: T;
  releaseDate?: T;
  metaScore?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "genre_select".
 */
export interface GenreSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platform_select".
 */
export interface PlatformSelect<T extends boolean = true> {
  name?: T;
  logo?: T;
  type?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platformType_select".
 */
export interface PlatformTypeSelect<T extends boolean = true> {
  name?: T;
  platform?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store_select".
 */
export interface StoreSelect<T extends boolean = true> {
  name?: T;
  logo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "theme_select".
 */
export interface ThemeSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gameHero_select".
 */
export interface GameHeroSelect<T extends boolean = true> {
  alt?: T;
  blurDataURL?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        classic?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        wide?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        anamorphic?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_select".
 */
export interface UserSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gameGrid_select".
 */
export interface GameGridSelect<T extends boolean = true> {
  alt?: T;
  blurDataURL?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gameLogo_select".
 */
export interface GameLogoSelect<T extends boolean = true> {
  alt?: T;
  blurData?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "companyLogo_select".
 */
export interface CompanyLogoSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "countryFlag_select".
 */
export interface CountryFlagSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platformLogo_select".
 */
export interface PlatformLogoSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "storeLogo_select".
 */
export interface StoreLogoSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}